#include <stdio.h>

#define MAX 100

// Structure to store process details
struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int completionTime;
    int waitingTime;
    int turnAroundTime;
    int isCompleted; // Flag to check if the process is completed
};

int main() {
    int n, i, currentTime = 0, completed = 0, minIndex;
    float avgWaitingTime = 0, avgTurnAroundTime = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX];

    // Input process details
    for (i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for process %d: ", processes[i].id);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for process %d: ", processes[i].id);
        scanf("%d", &processes[i].burstTime);
        processes[i].isCompleted = 0; // Mark process as incomplete
    }

    // SJF Scheduling Algorithm (Non-Preemptive)
    while (completed < n) {
        minIndex = -1;

        // Find the process with the shortest burst time that has arrived
        for (i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && !processes[i].isCompleted) {
                if (minIndex == -1 || processes[i].burstTime < processes[minIndex].burstTime) {
                    minIndex = i;
                }
            }
        }

        if (minIndex == -1) {
            // No process is available, move time forward
            currentTime++;
            continue;
        }

        // Execute the selected process
        currentTime += processes[minIndex].burstTime;
        processes[minIndex].completionTime = currentTime;
        processes[minIndex].turnAroundTime = processes[minIndex].completionTime - processes[minIndex].arrivalTime;
        processes[minIndex].waitingTime = processes[minIndex].turnAroundTime - processes[minIndex].burstTime;
        processes[minIndex].isCompleted = 1; // Mark as completed

        avgWaitingTime += processes[minIndex].waitingTime;
        avgTurnAroundTime += processes[minIndex].turnAroundTime;
        completed++;
    }

    // Compute average waiting and turnaround time
    avgWaitingTime /= n;
    avgTurnAroundTime /= n;

    // Display results
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n",
               processes[i].id, processes[i].arrivalTime, processes[i].burstTime,
               processes[i].completionTime, processes[i].turnAroundTime, processes[i].waitingTime);
    }

    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnAroundTime);

    return 0;
}
