#include <stdio.h>

// Structure to hold process information
struct Process {
    int id;           // Process ID
    int burstTime;    // Burst time (execution time)
    int waitingTime;  // Waiting time
    int turnAroundTime; // Turnaround time
};

int main() {
    int n, i;
    float avgWaitingTime = 0, avgTurnAroundTime = 0;

    // Input: Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input: Burst time for each process
    for (i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter burst time for process %d: ", processes[i].id);
        scanf("%d", &processes[i].burstTime);
    }

    // Compute Waiting Time & Turnaround Time
    processes[0].waitingTime = 0; // First process has no waiting time

    for (i = 1; i < n; i++) {
        processes[i].waitingTime = processes[i - 1].waitingTime + processes[i - 1].burstTime;
    }

    for (i = 0; i < n; i++) {
        processes[i].turnAroundTime = processes[i].waitingTime + processes[i].burstTime;
        avgWaitingTime += processes[i].waitingTime;
        avgTurnAroundTime += processes[i].turnAroundTime;
    }

    // Compute average times
    avgWaitingTime /= n;
    avgTurnAroundTime /= n;

    // Display results
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burstTime, processes[i].waitingTime, processes[i].turnAroundTime);
    }

    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnAroundTime);

    return 0;
}
